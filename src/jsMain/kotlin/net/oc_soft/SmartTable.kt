package net.oc_soft

import kotlinx.browser.document
import kotlinx.browser.window

import kotlin.collections.MutableList
import kotlin.collections.ArrayList

import org.w3c.dom.Element
import org.w3c.dom.HTMLElement
import org.w3c.dom.HTMLTableElement
import org.w3c.dom.HTMLTableRowElement
import org.w3c.dom.HTMLTableCellElement
import org.w3c.dom.get
import org.w3c.dom.url.URL

class SmartTable {

    /**
     * get pdf element
     */
    val tableElements: Array<HTMLElement>
        get() {
            val elems = document.querySelectorAll(Site.tableQuery) 
            return Array<HTMLElement>(elems.length) {
                elems[it] as HTMLElement
            }
        }

    /**
     * table and definition list(generated by this object) pairs
     */
    val smartTables: MutableList<Array<HTMLElement>> =
        ArrayList<Array<HTMLElement>>()

    /**
     * bind this object into html elements
     */
    fun bind() {
        tableElements.forEach {
            if (it is HTMLTableElement) {
                updateSmartTables(it)
            }
        }
    }



    /**
     * unbind this object from html elements
     */
    fun unbind() {
        smartTables.forEach {
            it[1].remove()
        }
    }



    /**
     * update smart tables field in this object
     */
    fun updateSmartTables(table: HTMLTableElement) {
        createDLists(table)?.let {
            smartTables.add(arrayOf(table, it))
            table.after(it)
        }
    }

    /**
     * create table replacement element
     */
    fun createDLists(
        table: HTMLTableElement): HTMLElement? {
        val tableRow = table.tHead?.let {
            val rows = it.rows
            var row : HTMLTableRowElement? = null
            for (idx in 0 until rows.length) {
                val elem = rows[idx]
                if (elem is HTMLTableRowElement) {
                    row = elem 
                    break
                }
            }
            row
        }

        
        return tableRow?.let {
            val tRow = it
            val bodies = table.tBodies
            val container = document.createElement(Site.containerTag)
                as HTMLElement
            container.classList.add(*Site.containerClasses)
            for (bodyIdx in 0 until bodies.length) {
                val body = bodies[bodyIdx]
                body?.let {
                    val elems = it.children
                    for (idx in 0 until elems.length) {
                        val elem = elems[idx]
                        if (elem is HTMLTableRowElement) {
                            val containerElem = document.createElement(
                                Site.containerElementTag)
                            containerElem.append(
                                createDefintionList(tRow, elem))
                            container.append(containerElem)
                        }
                    }
                }
            }
            container
        }
    }
    
    /**
     * create definition list element from table row element
     */
    fun createDefintionList(
        headerRow: HTMLTableRowElement,
        rowElement: HTMLTableRowElement): HTMLElement {
        val dtCells = headerRow.cells
        val ddCells = rowElement.cells
        val result = document.createElement("dl") as HTMLElement

        for (idx in 0 until ddCells.length) {
            val ddCell = ddCells[idx]

            val ddContents = if (ddCell is HTMLTableCellElement) {
                ddCell.innerHTML
            } else {
                ""
            }
            val dtContents = if (idx < dtCells.length) {
                val dtCell = dtCells[idx]
                if (dtCell is HTMLTableCellElement) {
                    dtCell.innerHTML
                } else {
                    ""
                }
            } else {
                ""
            }
             
            val dtElem = document.createElement("dt")
            dtElem.innerHTML = dtContents
            val ddElem = document.createElement("dd")
            ddElem.innerHTML = ddContents
            result.append(dtElem)
            result.append(ddElem)
        }
        return result
    }
}

// vi: se ts=4 sw=4 et:
